{"version":3,"sources":["BookSuggestion.js","App.js","serviceWorker.js","index.js"],"names":["BookSuggestion","this","props","book","map","item","key","id","src","volumeInfo","imageLinks","thumbnail","alt","title","subtitle","authors","Component","App","handleChange","event","setState","userInput","target","value","handleClick","preventDefault","axios","url","state","method","responseType","params","maxResults","langRestrict","printType","then","response","data","items","className","onChange","type","name","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sSAmBeA,E,uKAfX,OACIC,KAAKC,MAAMC,KAAKC,KAAI,SAAAC,GAChB,OACI,yBAAKC,IAAKD,EAAKE,IACf,yBAAKC,IAAKH,EAAKI,WAAWC,WAAWC,UAAWC,IAAKP,EAAKI,WAAWI,QACrE,2BAAIR,EAAKI,WAAWI,OACpB,2BAAIR,EAAKI,WAAWK,UACpB,2BAAIT,EAAKI,WAAWM,iB,GATPC,aCuFdC,G,wDAnFb,aAAc,IAAD,8BACX,gBAOFC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZC,UAAUF,EAAMG,OAAOC,SAVd,EAcbC,YAAc,SAACL,GACbA,EAAMM,iBACNC,IAAM,CACJC,IAAI,yDAAD,OAA2D,EAAKC,MAAMP,WACzEQ,OAAQ,MACRC,aAAc,OACdC,OAAQ,CACNzB,IAAK,0CACL0B,WAAY,EACZC,aAAc,KACdC,UAAW,WAEZC,MAAK,SAACC,GACLA,EAAWA,EAASC,KAAKC,MACzB,EAAKlB,SAAS,CACZjB,KAAMiC,QA3BZ,EAAKR,MAAQ,CACXzB,KAAM,GACNkB,UAAW,IAJF,E,qDAmCb,OACE,yBAAKkB,UAAU,OAEb,8CAEA,8BACE,kCACE,mDACA,0CACA,2BAAOC,SAAUvC,KAAKiB,aAAcuB,KAAK,QAAQC,KAAK,QAAQnB,MAAM,UAAUhB,GAAG,YAEjF,kDACA,2BAAOiC,SAAUvC,KAAKiB,aAAcuB,KAAK,QAAQC,KAAK,QAAQnB,MAAM,kBAAkBhB,GAAG,oBAEzF,0CACA,2BAAOiC,SAAUvC,KAAKiB,aAAcuB,KAAK,QAAQC,KAAK,QAAQnB,MAAM,UAAUhB,GAAG,YAEjF,2CACA,2BAAOiC,SAAUvC,KAAKiB,aAAcuB,KAAK,QAAQC,KAAK,QAAQnB,MAAM,WAAWhB,GAAG,aAElF,8CACA,2BAAOiC,SAAUvC,KAAKiB,aAAcuB,KAAK,QAAQC,KAAK,QAAQnB,MAAM,cAAchB,GAAG,gBAErF,0CACA,2BAAOiC,SAAUvC,KAAKiB,aAAcuB,KAAK,QAAQC,KAAK,QAAQnB,MAAM,UAAUhB,GAAG,YAEjF,0CACA,2BAAOiC,SAAUvC,KAAKiB,aAAcuB,KAAK,QAAQC,KAAK,QAAQnB,MAAM,UAAUhB,GAAG,YAEjF,4CACA,2BAAOiC,SAAUvC,KAAKiB,aAAcuB,KAAK,QAAQC,KAAK,QAAQnB,MAAM,YAAYhB,GAAG,cAEnF,yCACA,2BAAOiC,SAAUvC,KAAKiB,aAAcuB,KAAK,QAAQC,KAAK,QAAQnB,MAAM,SAAShB,GAAG,WAEhF,0CACA,2BAAOiC,SAAUvC,KAAKiB,aAAcuB,KAAK,QAAQC,KAAK,QAAQnB,MAAM,UAAUhB,GAAG,aAEnF,4BAAQoC,QAAS1C,KAAKuB,aAAtB,oBAGF,kBAAC,EAAD,CAAgBrB,KAAMF,KAAK2B,MAAMzB,Y,GA7ErBa,cCOE4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.eabb8b40.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass BookSuggestion extends Component {\n    render() {\n    return (\n        this.props.book.map(item => {\n            return (\n                <div key={item.id}>\n                <img src={item.volumeInfo.imageLinks.thumbnail} alt={item.volumeInfo.title}/>\n                <p>{item.volumeInfo.title}</p>\n                <p>{item.volumeInfo.subtitle}</p>\n                <p>{item.volumeInfo.authors}</p>\n                </div>\n            )\n            })\n    )\n    }\n}\n\nexport default BookSuggestion;\n","import React, {Component} from 'react';\nimport axios from 'axios';\nimport BookSuggestion from './BookSuggestion.js'\nimport './App.css';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      book: [],\n      userInput: [],\n    }\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      userInput:event.target.value,\n    })\n  }\n\n  handleClick = (event) => {\n    event.preventDefault();\n    axios({\n      url: `https://www.googleapis.com/books/v1/volumes?q=subject:${this.state.userInput}`,\n      method: 'GET',\n      responseType: 'JSON',\n      params: {\n        key: 'AIzaSyCWOxEYQrKzQYJlWSUKJKZE8KdQdWv4HTM',\n        maxResults: 1,\n        langRestrict: 'en',\n        printType: 'books',\n      },\n    }).then((response) => {\n        response = response.data.items;\n        this.setState({\n          book: response,\n        })\n    })\n  }\n\n  render() {\n  return (\n    <div className=\"App\">\n\n      <h1>Suggest a Book</h1>\n\n      <form>\n        <fieldset>\n          <legend>Choose a genre:</legend>\n          <label>Fantasy</label>\n          <input onChange={this.handleChange} type=\"radio\" name=\"genre\" value=\"fantasy\" id=\"fantasy\"/>\n\n          <label>Science-Fiction</label>\n          <input onChange={this.handleChange} type=\"radio\" name=\"genre\" value=\"science-fiction\" id=\"science-fiction\"/> \n\n          <label>Mystery</label>\n          <input onChange={this.handleChange} type=\"radio\" name=\"genre\" value=\"mystery\" id=\"mystery\"/>\n\n          <label>Thriller</label>\n          <input onChange={this.handleChange} type=\"radio\" name=\"genre\" value=\"thriller\" id=\"thriller\"/>\n\n          <label>Young Adult</label>\n          <input onChange={this.handleChange} type=\"radio\" name=\"genre\" value=\"young-adult\" id=\"young-adult\"/>\n\n          <label>History</label>\n          <input onChange={this.handleChange} type=\"radio\" name=\"genre\" value=\"history\" id=\"history\"/>\n\n          <label>Science</label>\n          <input onChange={this.handleChange} type=\"radio\" name=\"genre\" value=\"science\" id=\"science\"/>\n\n          <label>Biography</label>\n          <input onChange={this.handleChange} type=\"radio\" name=\"genre\" value=\"biography\" id=\"biography\"/>\n\n          <label>Poetry</label>\n          <input onChange={this.handleChange} type=\"radio\" name=\"genre\" value=\"poetry\" id=\"poetry\"/>\n\n          <label>Romance</label>\n          <input onChange={this.handleChange} type=\"radio\" name=\"genre\" value=\"romance\" id=\"romance\"/> \n        </fieldset>\n        <button onClick={this.handleClick}>Find me a book!</button>\n      </form>\n\n      <BookSuggestion book={this.state.book} />\n\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}